<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>UnCoverIt</title>
        <description>UnCoverIt - Zhoujj</description>
        <link>http://zhoujj2013.github.io/UnCoverIt</link>
        <link>http://zhoujj2013.github.io/UnCoverIt</link>
        <lastBuildDate>2014-07-18T15:44:16+08:00</lastBuildDate>
        <pubDate>2014-07-18T15:44:16+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Learn:利用shell和perl构建转录组(RNA-seq)分析流程</title>
                <description>
&lt;p&gt;随着NGS的高速发展，越来越多有价值的物种被测序，随之而来的，基因表达及表观遗传数据会急剧增加。&lt;/p&gt;

&lt;p&gt;公共数据库有大量已经公开的数据，这些数据大多数是基于二代测序技术产生的。&lt;/p&gt;

&lt;p&gt;fly/C.elegan:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.modencode.org/&quot;&gt;http://www.modencode.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mouse and Human:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://genome.ucsc.edu/ENCODE/&quot;&gt;http://genome.ucsc.edu/ENCODE/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GEO/ENA&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ncbi.nlm.nih.gov/geo/&quot;&gt;http://www.ncbi.nlm.nih.gov/geo/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ebi.ac.uk/ena/&quot;&gt;http://www.ebi.ac.uk/ena/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;zebra-fish&quot;&gt;zebra fish转录分析方案设计&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;生物学问题&lt;/strong&gt;: 比较同一时期，male body 和 male head样品的基因表达的差异。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据来源&lt;/strong&gt;: 参考文章，&lt;a href=&quot;http://genome.cshlp.org/content/22/10/2067.long&quot;&gt;http://genome.cshlp.org/content/22/10/2067.long&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;male_body(ERR004012): &lt;/p&gt;

&lt;p&gt;ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR004/ERR004012/ERR004012_1.fastq.gz&lt;/p&gt;

&lt;p&gt;ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR004/ERR004012/ERR004012_2.fastq.gz&lt;/p&gt;

&lt;p&gt;male_head(ERR004022): &lt;/p&gt;

&lt;p&gt;ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR004/ERR004022/ERR004022_1.fastq.gz&lt;/p&gt;

&lt;p&gt;ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR004/ERR004022/ERR004022_2.fastq.gz&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方案设计&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/87531643/web/rna-seq.png&quot; alt=&quot;rna-seq_diagram&quot; title=&quot;数据分析流程图&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;测序数据质量控制&lt;/h4&gt;

&lt;p&gt;下载测序数据：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mkdir ZabraRnaSeq
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ZabraRnaSeq
mkdir data
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;data
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR004/ERR004012/ERR004012_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR004/ERR004012/ERR004012_2.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR004/ERR004022/ERR004022_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR004/ERR004022/ERR004022_2.fastq.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;用fastqc对数据质量进行查看：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# $fastqc = path_to_fastqc_dir&lt;/span&gt;
ls *.gz | xargs gunzip
&lt;span class=&quot;nv&quot;&gt;$fastqc&lt;/span&gt;/fastqc stdin -o ./ ./ERR004012_1.fastq
&lt;span class=&quot;nv&quot;&gt;$fastqc&lt;/span&gt;/fastqc stdin -o ./ ./ERR004012_2.fastq
&lt;span class=&quot;nv&quot;&gt;$fastqc&lt;/span&gt;/fastqc stdin -o ./ ./ERR004022_1.fastq
&lt;span class=&quot;nv&quot;&gt;$fastqc&lt;/span&gt;/fastqc stdin -o ./ ./ERR004022_2.fastq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过fastqc结果判断数据是否合格，具体判断标准,请参考下面链接的Example Reports部分：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bioinformatics.babraham.ac.uk/projects/fastqc/&quot;&gt;http://www.bioinformatics.babraham.ac.uk/projects/fastqc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果你发现有些数据不合格，或者还有adapter，应该用相应的程序把低质量数据去除。&lt;/p&gt;

&lt;p&gt;如果你对fastq文件数据质量体系没有概念，请先阅读&lt;a href=&quot;http://en.wikipedia.org/wiki/FASTQ_format&quot;&gt;fastq文件格式&lt;/a&gt;和&lt;a href=&quot;http://en.wikipedia.org/wiki/Phred_quality_score&quot;&gt;Phred_quality_score&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;用fastx去除低质量数据：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# $fastx = path_to_fastx_dir&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# GA2 phred 33, read length=75&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$fastx&lt;/span&gt;/bin/fastq_quality_trimmer -t 36 -l 35 -i ./ERR004012_1.fastq -o ./ERR004012_1.trimed.fq
&lt;span class=&quot;nv&quot;&gt;$fastx&lt;/span&gt;/bin/fastq_quality_trimmer -t 36 -l 35 -i ./ERR004012_1.fastq -o ./ERR004012_2.trimed.fq
&lt;span class=&quot;nv&quot;&gt;$fastx&lt;/span&gt;/bin/fastq_quality_trimmer -t 36 -l 35 -i ./ERR004012_1.fastq -o ./ERR004022_1.trimed.fq
&lt;span class=&quot;nv&quot;&gt;$fastx&lt;/span&gt;/bin/fastq_quality_trimmer -t 36 -l 35 -i ./ERR004012_1.fastq -o ./ERR004022_2.trimed.fq
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;c&quot;&gt;# 返回原来的目录&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此处没有出现高频adapter序列,所以就不用跑$fastx/bin/fastx_clipper。&lt;/p&gt;

&lt;h4 id=&quot;reads&quot;&gt;短reads比对及结果分析&lt;/h4&gt;

&lt;p&gt;准备参考序列及参考序列index:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mkdir Zebra &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Zebra
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 MT; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;wget ftp://ftp.ensembl.org/pub/release-75/fasta/danio_rerio/dna/Danio_rerio.Zv9.75.dna.chromosome.&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;.fa.gz;done;
zcat *.fa.gz | sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^/chr/g&amp;#39;&lt;/span&gt; &amp;gt; Danio_rerio.Zv9.75.Chr.fa
rm *.fa.gz
bowtie2-build ./Danio_rerio.Zv9.75.Chr.fa ./Danio_rerio.Zv9.75.Chr

&lt;span class=&quot;c&quot;&gt;# download geneset&lt;/span&gt;
wget ftp://ftp.ensembl.org/pub/release-75/gtf/danio_rerio/Danio_rerio.Zv9.75.gtf.gz
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 MT; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;zcat Danio_rerio.Zv9.75.gtf.gz | awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;$1 == $i&amp;#39;&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^/chr/g&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; Danio_rerio.Zv9.75.gtf;done;
rm Danio_rerio.Zv9.75.gtf.gz
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;c&quot;&gt;# 返回原来的目录&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;用tophat比对到zebra fish参考基因组：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# $tophat = path_to_tophat_dir&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 注意查看内存，两个taphat很容易把内存消耗掉的&lt;/span&gt;
nohup &lt;span class=&quot;nv&quot;&gt;$tophat&lt;/span&gt;/tophat2 -G ./Zebra/Danio_rerio.Zv9.75.gtf -o male_body_tophat -p 8 ./Zebra/Danio_rerio.Zv9.75.Chr ./data/ERR004012_1.trimed.fq ./ERR004012_2.trimed.fq &amp;gt;MB.tophat.std 2&amp;gt;MB.tophat.err&amp;amp;
nohup &lt;span class=&quot;nv&quot;&gt;$tophat&lt;/span&gt;/tophat2 -G ./Zebra/Danio_rerio.Zv9.75.gtf -o male_head_tophat -p 8 ./Zebra/Danio_rerio.Zv9.75.Chr ./data/ERR004022_1.trimed.fq ./ERR004022_2.trimed.fq &amp;gt;MH.tophat.std 2&amp;gt;MH.tophat.err&amp;amp;
&lt;span class=&quot;c&quot;&gt;# 跑完后请从MB.tophat.err，MH.tophat.err查看基本比对结果统计。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 具体结果文件，请查看taphat的文档&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 主要结果文件是，accepted_hits.bam文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section-1&quot;&gt;表达量计算及差异表达分析&lt;/h4&gt;

&lt;p&gt;用cufflinks组装新的转录集合及计算每一个转录本的表达量：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# $cufflinks = path_to_cufflinks_dir&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$cufflinks&lt;/span&gt;/cufflinks -g ./Zebra/Danio_rerio.Zv9.75.gtf -o ./male_body_cufflinks ./male_body_tophat/accepted_hits.bam &amp;gt;MB.cufflinks.std 2&amp;gt;MB.cufflnks.err&amp;amp;
&lt;span class=&quot;nv&quot;&gt;$cufflinks&lt;/span&gt;/cufflinks -g ./Zebra/Danio_rerio.Zv9.75.gtf -o ./male_head_cufflinks ./male_head_tophat/accepted_hits.bam &amp;gt;MH.cufflinks.std 2&amp;gt;MH.cufflnks.err&amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;合并两个样品的转录本：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vim transcript.lst
&lt;span class=&quot;c&quot;&gt;# 加入transcript的路径&lt;/span&gt;
./male_body_cufflinks/transcripts.gtf
./male_head_cufflinks/transcripts.gtf

mkdir ./merged_asm
&lt;span class=&quot;nv&quot;&gt;$cufflinks&lt;/span&gt;/cuffmerge -o ./merged_asm -g ./Zebra/Danio_rerio.Zv9.75.gtf -s ./Zebra/Danio_rerio.Zv9.75.Chr.fa -p 8 ./transcript.lst &amp;gt; cuffmerge.std 2&amp;gt; cuffmerge.err &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;用cuffdiff比较两个样品的差异表达基因：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$cufflinks&lt;/span&gt;/cuffdiff -o MBvsMH_cuffdiff -L MB,MH -p 8 ./merged_asm/transcripts.gtf ./male_body_tophat/accepted_hits.bam ./male_head_tophat/accepted_hits.bam &amp;gt;MBvsMH_cuffdiff.std 2&amp;gt;MBvsMH_cuffdiff.err &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;生物信息分析报告&lt;/h4&gt;

&lt;p&gt;可以根据不同的需要组织数据分析报告，主要以下几点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;测序数据基本统计及质量评估；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;短序列比对结果统计；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;转录本数目、表达量统计；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;样品间基因表达差异分析结果；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进行必要的基因功能注释分析。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面把RNA-seq数据分析实现了一次，有人可能会问，你这也可以算是流程吗？&lt;/p&gt;

&lt;p&gt;分析流程本来就是这样的，你只需要用shell或者perl把上面的每一步串联起来，就是一个自动化的流程了。&lt;/p&gt;

&lt;p&gt;转载请标明出处：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/19/bioinfo-mix-together/&quot;&gt;http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/19/bioinfo-mix-together/&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/19/bioinfo-mix-together</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/19/bioinfo-mix-together</guid>
                <pubDate>2014-07-19T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Learn:常用生物信息分析软件<i>陈列馆</i></title>
                <description>
&lt;p&gt;近几年来，二代测序技术(NGS)得到广泛地应用，NGS产生海量生物信息数据，然后这些数据就是通过各种生物信息处理软件，转化为生物学意义的有用信息。生物信息分析软件各类繁多，但是主要是基于NGS的短片段序列分析为主。近两年，研究者对生物功能的研究不断深入，还出现了很多基因功能分析软件以及各种生物信息数据分析流程。&lt;/p&gt;

&lt;p&gt;现阶段生物信息分析几乎都是基于序列比对结果展开的。&lt;/p&gt;

&lt;p&gt;下面以TopHat为例子，说明如何利用生物信息分析软件进行生物学研究。&lt;/p&gt;

&lt;h4 id=&quot;tophat&quot;&gt;Tophat的安装及使用&lt;/h4&gt;

&lt;p&gt;TopHat要求先安装bowtie2, 因为&lt;a href=&quot;http://bowtie-bio.sourceforge.net/bowtie2/index.shtml&quot;&gt;bowtie2&lt;/a&gt;是TopHat的比对工具：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 在个人目录下建立存放程序的目录&lt;/span&gt;
mkdir ~/software

&lt;span class=&quot;c&quot;&gt;# 下载bowtie2和tophat，此处我下载预编译版本，也就说，下载完毕就可以使用。&lt;/span&gt;
wget http://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.2.3/bowtie2-2.2.3-linux-x86_64.zip/download -O bowtie2-2.2.3-linux-x86_64.zip
wget http://ccb.jhu.edu/software/tophat/downloads/tophat-2.0.12.Linux_x86_64.tar.gz

&lt;span class=&quot;c&quot;&gt;# 解压bowtie2-2.2.3-linux-x86_64.zip&lt;/span&gt;
unzip bowtie2-2.2.3-linux-x86_64.zip

&lt;span class=&quot;c&quot;&gt;# 把bowtie2加入到系统环境变量，用vim打开~/.bashrc，添加行&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/software/bowtie2-2.2.3/:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
which bowtie2

&lt;span class=&quot;c&quot;&gt;# 同时，你也可以把bowtie1安装上，如果你是用ubuntu的话&lt;/span&gt;
sudo apt-get install bowtie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;测试bowtie2是否正常运行:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 进入example文件夹&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/software/bowtie2-2.2.3/example/

&lt;span class=&quot;c&quot;&gt;# 建立参考基因组index&lt;/span&gt;
bowtie2-build reference/lambda_virus.fa reference/lambda_virus

&lt;span class=&quot;c&quot;&gt;# 测序bowtie2比对&lt;/span&gt;
bowtie2 -x ./reference/lambda_virus -1 ./reads/reads_1.fq -2 ./reads/reads_2.fq -S align.sam 2&amp;gt; bowtie.log

&lt;span class=&quot;c&quot;&gt;# 查看比对情况和比对结果&lt;/span&gt;
cat bowtie.log
less -S align.sam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;安装tophat:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 解压tophat数据包&lt;/span&gt;
tar xzvf tophat-2.0.12.Linux_x86_64.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ./tophat-2.0.12.Linux_x86_64
./tophat -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们用tophat官方网站的数据对tophat进行测试：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mkdir &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 下载hg19的参考基因组&lt;/span&gt;
wget ftp://ftp.ccb.jhu.edu/pub/data/bowtie2_indexes/hg19.zip
unzip hg19.zip

&lt;span class=&quot;c&quot;&gt;# 下载tophat的reads数据&lt;/span&gt;
wget http://ccb.jhu.edu/software/tophat/downloads/tophat2_simulation_data/junction_test/sim_1.fq.tar.gz
wget http://ccb.jhu.edu/software/tophat/downloads/tophat2_simulation_data/junction_test/sim_2.fq.tar.gz
tar xzvf sim_1.fq.tar.gz
tar xzvf sim_2.fq.tar.gz

&lt;span class=&quot;c&quot;&gt;# 使用tophat处理RNAseq数据，此处用的是一个模拟数据，ref: http://genomebiology.com/2013/14/4/R36&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 这个数据量比较大，请放到后台运行。当然你也可以投放到大型节点运行。&lt;/span&gt;
nohup ../tophat ./hg19/hg19 ./sim_1.fq ./sim_2.fq &amp;gt;tophat.std 2&amp;gt;tophat.err&amp;amp;

&lt;span class=&quot;c&quot;&gt;# 用top -u &amp;lt;username&amp;gt;查看情况&lt;/span&gt;
top -u username

&lt;span class=&quot;c&quot;&gt;# 查看tophat_out结果&lt;/span&gt;
ls -l ./tophat_out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从这个简单的例子可以看到，生物信息分析是需要读大量材料，去不断尝试新的软件，不断学习和积累的。因为你不可能把所有的分析软件用一次，所以你要具备学习的能力。&lt;/p&gt;

&lt;p&gt;当你遇到一个生物学问题的时候，你能想起用什么软件相互组合，才能够解决你的问题。&lt;/p&gt;

&lt;p&gt;最后剩下的就是不断学习，不断尝试，也许这就是科研。&lt;/p&gt;

&lt;p&gt;由此看来，生物信息分析不是一门容易的技术活。&lt;/p&gt;

&lt;h4 id=&quot;seek-for-help&quot;&gt;获取帮助(seek for help)&lt;/h4&gt;

&lt;p&gt;当我们在安装使用过程中遇到困难的时候:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;应该先查看程序的使用说明文档；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用google search看一下有没有人遇到类似的情况，寻找合适的解决方案；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果实在不行，可以在生物信息社区寻求解答的方法，如&lt;a href=&quot;http://seqanswers.com/&quot;&gt;seqanswer&lt;/a&gt;和&lt;a href=&quot;https://www.biostars.org/&quot;&gt;biostar&lt;/a&gt;；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后实在解决不了，请找expert。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section&quot;&gt;生物信息分析软件常规安装方法&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;c语言程序包：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;./configure &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;install_dir&amp;gt; &lt;span class=&quot;c&quot;&gt;#有的程序没有这一部分&lt;/span&gt;
make
make &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Perl语言程序包&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;perl Makefile.PL &lt;span class=&quot;nv&quot;&gt;PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;install_dir&amp;gt; &lt;span class=&quot;c&quot;&gt;#有的程序没有这一部分&lt;/span&gt;
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Python语言包&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;python setup.py build --build-base&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;install_dir_path&amp;gt;
python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;预编译版本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一般来说，这种已经编译的程序是不需要再进行其它操作了。&lt;/p&gt;

&lt;p&gt;直接把目标文件变成可执行，就可以用了。&lt;/p&gt;

&lt;p&gt;例如，fastqc&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;chmod 755 fastqc
./fastqc --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section-1&quot;&gt;常用生物信息分析软件&lt;/h4&gt;

&lt;p&gt;下面列出一些常用的生物信息分析软件:&lt;/p&gt;

&lt;p&gt;（链接时刻在变，我只提供keywork，如有需要请自行google）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;局部比对&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;NCBI blast&lt;/p&gt;

&lt;p&gt;blat&lt;/p&gt;

&lt;p&gt;fasta&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;全局比对&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;muscle&lt;/p&gt;

&lt;p&gt;clustal&lt;/p&gt;

&lt;p&gt;t-coffee&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;全基因组比对&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;blastz/lastz&lt;/p&gt;

&lt;p&gt;MUMmer&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;短序列比对&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SOAP2&lt;/p&gt;

&lt;p&gt;Bowtie1/Bowtie2&lt;/p&gt;

&lt;p&gt;BWA&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;短序列测序质量控制&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;fastQC&lt;/p&gt;

&lt;p&gt;cutadaptor&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RNAseq比对、表达量估计和差异表达分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TopHat/cufflinks&lt;/p&gt;

&lt;p&gt;DEseq&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;序列信号估计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MACS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;短序列拼接&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Trinity&lt;/p&gt;

&lt;p&gt;SOAPdenovo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NGS数据操作工具集合&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;samtools&lt;/p&gt;

&lt;p&gt;BEDtools&lt;/p&gt;

&lt;p&gt;BEDops&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分子进化相关的信息分析工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PAML&lt;/p&gt;

&lt;p&gt;Treebest&lt;/p&gt;

&lt;p&gt;转载请标明出处：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/17/bioinfo-tools-collect-and-use/&quot;&gt;http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/17/bioinfo-tools-collect-and-use/&lt;/a&gt;&lt;/p&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/18/bioinfo-tools-collect-and-use</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/18/bioinfo-tools-collect-and-use</guid>
                <pubDate>2014-07-18T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Learn:用Perl处理生物信息数据</title>
                <description>
&lt;p&gt;我在计算机方面不在行，所以就不讨论为什么选择perl语言。因为生物研究者更加关心什么工具可以让他们能快速处理大量的生物信息数据，perl脚本可以满足您的需求。&lt;/p&gt;

&lt;p&gt;100M的2&lt;em&gt;75bp reads大概有10G左右，比对结果文件&lt;/em&gt;.sam大概30G。这个数据太大了，在普通桌面电脑中是无法进行分析的，因此在大型计算机下，很有必要掌握一门能快速处理文本的语言。&lt;/p&gt;

&lt;p&gt;大多数优秀的生物信息数据分析软件是要求在linux/unix环境下运行了，所以进行生物信息分析的最基本要求是：你能在linux命令行环境下随心所欲地处理数据。&lt;/p&gt;

&lt;h4 id=&quot;perl&quot;&gt;perl语言学习材料&lt;/h4&gt;

&lt;p&gt;perl语言博大精深，此处我引用&lt;a href=&quot;http://perlmaven.com/&quot;&gt;Perl Maven&lt;/a&gt;。这个教程的好处是有英文版，也有中文版，当然重要的是free。&lt;/p&gt;

&lt;p&gt;Perl Maven中文版&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cn.perlmaven.com/perl-tutorial&quot;&gt;http://cn.perlmaven.com/perl-tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perl Maven英文版&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://perlmaven.com/perl-tutorial&quot;&gt;http://perlmaven.com/perl-tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;建议先阅读中文版本，再阅读英文版本，理解作者的真正用意。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/87531643/web/perl1linerCH.txt&quot;&gt;perl单行命令&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;bash-shell&quot;&gt;bash shell学习材料&lt;/h4&gt;

&lt;p&gt;在&lt;a href=&quot;http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/simple-shell-command-for-bioinfo/&quot;&gt;Learn:用shell命令完成简单生物信息分析查询及统计&lt;/a&gt;中，我们用到sed和awk命令，其实是两种古老的文本处理工具。&lt;/p&gt;

&lt;p&gt;sed命令教程&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.kuqin.com/docs/sed.html&quot;&gt;教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/87531643/web/sed1linerCH.txt&quot;&gt;sed单行命令&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;awk命令教程&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.kuqin.com/docs/awk.html&quot;&gt;教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/87531643/web/awk1linerEN.txt&quot;&gt;awk单行命令&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;详细解释：&lt;a href=&quot;http://www.catonmat.net/blog/awk-one-liners-explained-part-one/&quot;&gt;part1&lt;/a&gt; &lt;a href=&quot;http://www.catonmat.net/blog/awk-one-liners-explained-part-two/&quot;&gt;part2&lt;/a&gt; &lt;a href=&quot;http://www.catonmat.net/blog/awk-one-liners-explained-part-three/&quot;&gt;part3&lt;/a&gt; &lt;a href=&quot;http://www.catonmat.net/blog/update-on-famous-awk-one-liners-explained/&quot;&gt;part4&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;perl-1&quot;&gt;在命令行中使用perl&lt;/h4&gt;

&lt;p&gt;前面的文章提到用shell命令对zebra fish基因组文件进行一些简单统计分析，但是面对一些复杂的情况，只依赖命令行会显得苍白无力了。&lt;/p&gt;

&lt;p&gt;例如：计算zebra fish基因组的长度、计算zebra fish每一个蛋白序列的长度、计算zebra fish外显子的平均长度等。&lt;/p&gt;

&lt;p&gt;下面先看一下perl怎么在命令行下使用单行命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 用perl进行计算&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -e 表示直接执行&lt;/span&gt;
perl -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;print 10*10,&amp;quot;\n&amp;quot;;&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 用perl读取fasta文件的序列id&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 按照顺序一行一行读取文件&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# chomp; 把换行符去除&lt;/span&gt;
perl -ne &lt;span class=&quot;s1&quot;&gt;&amp;#39;chomp; my $id = $1 if(/&amp;gt;(\S+)/); print &amp;quot;$id\n&amp;quot; if($id);&amp;#39;&lt;/span&gt; Danio_rerio.Zv9.75.dna.toplevel.fa

&lt;span class=&quot;c&quot;&gt;# 用单行perl计算基因组的长度&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# BEGIN{my $sum = 0;} 程序开始读文件前执行，定义了一个全局变量&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# END{print &amp;quot;Total: $sum\n&amp;quot;;} 程序完成文件读取后执行&lt;/span&gt;
perl -ne &lt;span class=&quot;s1&quot;&gt;&amp;#39;BEGIN{my $sum = 0;} chomp; next if(/^&amp;gt;/); $sum += length($_); END{print &amp;quot;Total: $sum\n&amp;quot;;}&amp;#39;&lt;/span&gt; Danio_rerio.Zv9.75.dna.toplevel.fa

&lt;span class=&quot;c&quot;&gt;# 用同样的方法可以完成所有基因的蛋白序列平均长度统计&lt;/span&gt;
perl -ne &lt;span class=&quot;s1&quot;&gt;&amp;#39;BEGIN{my $sum = 0; my $count = 0;} chomp; $count++ if(/^&amp;gt;/); next if(/^&amp;gt;/); $sum += length($_); END{my $avg = $sum/$count; print &amp;quot;PEP average length: $avg\n&amp;quot;;}&amp;#39;&lt;/span&gt; Danio_rerio.Zv9.75.pep.all.fa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这时候，想一下我们在做生物学研究时，还需要那些统计分析，可以尝试用perl完成。&lt;/p&gt;

&lt;h4 id=&quot;perl-2&quot;&gt;perl脚本&lt;/h4&gt;

&lt;p&gt;当然还有一些更加复杂的分析，用perl脚本去实现更加方便。&lt;/p&gt;

&lt;p&gt;以下是如何计算zebra fish的染色体长度？&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 新建一个文件名&lt;/span&gt;
vim seq_len.pl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;vim是linux系统下的文本编程器，当然你可以用gedit。&lt;/p&gt;

&lt;p&gt;具体请参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.openvim.com/tutorial.html&quot;&gt;Interactive Vim tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下是seq_len.pl的代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl -w&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#用严格的语法格式，这样不容易出错&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fa_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 读入所要处理的fasta文件名&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$fa_f&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 打开fasta文件，如果打开失败的话，输出标准错误信息&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;&amp;lt;IN&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# $/ 变量是perl是存储文件句柄的分隔符&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&amp;lt;IN&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\S+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 获取序列的id&lt;/span&gt;
	&lt;span class=&quot;vg&quot;&gt;$/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;# 分隔符$/ 变量变成&amp;quot;&amp;gt;&amp;quot;，可以每次读进属于id的序列&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;&amp;lt;IN&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;chomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# 去除分隔符&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;s/\n//g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# 把换行符&amp;quot;\n&amp;quot;去除&lt;/span&gt;
	&lt;span class=&quot;vg&quot;&gt;$/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$id\t&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 输出结果&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行perl程序:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;perl ./seq_len.pl Danio_rerio.Zv9.75.dna.toplevel.fa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;mix-togethter&quot;&gt;Mix togethter&lt;/h4&gt;

&lt;p&gt;尝试把perl和shell结合在一起，我们要对每一个基因组都进行DNA和蛋白质序列长度进行统计。&lt;/p&gt;

&lt;p&gt;建立并打开basic_stat.sh&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vim basic_stat.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;basic_stat.sh代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# $1 表示输入的第一个参数，$2代表第二个参数&lt;/span&gt;
perl ./seq_len.pl &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.dna.toplevel.fa &amp;gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.ChrLen.lst
perl ./seq_len.pl &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.pep.all.fa &amp;gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.ProteinLen.lst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行shell脚本：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# sh ./basic_stat.sh &amp;lt;genome_name_prefix&amp;gt;&lt;/span&gt;
sh ./basic_stat.sh Danio_rerio.Zv9.75
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;转载请标明出处：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/17/perl-for-bioinformatics/&quot;&gt;http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/17/perl-for-bioinformatics/&lt;/a&gt;&lt;/p&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/17/perl-for-bioinformatics</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/17/perl-for-bioinformatics</guid>
                <pubDate>2014-07-17T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Learn:用shell命令完成简单生物信息分析查询及统计</title>
                <description>
&lt;p&gt;在开始这篇文之前，先具有一些linux知识和一些生物知识。&lt;/p&gt;

&lt;p&gt;如果没有使用过linux，请阅读：(不需要全部阅读，了解一下就好)&lt;/p&gt;

&lt;p&gt;http://en.wikipedia.org/wiki/Linux&lt;/p&gt;

&lt;p&gt;http://www.92csz.com/study/linux/&lt;/p&gt;

&lt;p&gt;如果不是生物学背景的读者，请有时间的时候，阅读：&lt;/p&gt;

&lt;p&gt;http://www.nature.com/scitable&lt;/p&gt;

&lt;p&gt;如果你在MS window下工作，还应该去安装putty大型机登录软件和winscp运程文件浏览器:&lt;/p&gt;

&lt;p&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/p&gt;

&lt;p&gt;http://winscp.net/eng/docs/lang:chs&lt;/p&gt;

&lt;p&gt;如果你没有linux系统，请先安装Oracle VM VirtualBox，并在虚拟机中安装linux（建议安装debian linux）:&lt;/p&gt;

&lt;p&gt;https://www.virtualbox.org/wiki/Downloads&lt;/p&gt;

&lt;p&gt;https://www.debian.org/&lt;/p&gt;

&lt;p&gt;如果你对生物数据格式一无所知，请查看fa,gtf格式:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://genome.ucsc.edu/FAQ/FAQformat.html&quot;&gt;http://genome.ucsc.edu/FAQ/FAQformat.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://genetics.bwh.harvard.edu/pph/FASTA.html&quot;&gt;http://genetics.bwh.harvard.edu/pph/FASTA.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面以zera fish为例子，讲解一下如何在linux terminal下做一些简单的生物学分析：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从ensembl收集zebra fish数据&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 获取自己当前所在路径并查看当前文件夹有什么文件及文件夹&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 建立存放zebra fish数据的文件夹并进入此文件夹&lt;/span&gt;
mkdir zebra_fish
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;zebra_fish

&lt;span class=&quot;c&quot;&gt;# 至于我是如何知道这些下载路径，请慢慢熟悉ensembl数据库。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 下载zebra fish参考序列&lt;/span&gt;
wget ftp://ftp.ensembl.org/pub/release-75/fasta/danio_rerio/dna/Danio_rerio.Zv9.75.dna.toplevel.fa.gz

&lt;span class=&quot;c&quot;&gt;# 下载zebra fish蛋白序列&lt;/span&gt;
wget ftp://ftp.ensembl.org/pub/release-75/fasta/danio_rerio/pep/Danio_rerio.Zv9.75.pep.all.fa.gz

&lt;span class=&quot;c&quot;&gt;# 下载zebra fish基因集gtf文件&lt;/span&gt;
wget ftp://ftp.ensembl.org/pub/release-75/gtf/danio_rerio/Danio_rerio.Zv9.75.gtf.gz

&lt;span class=&quot;c&quot;&gt;# 如果标准错误输出中看到任务完成，就表示下载成功，一般来说会有进度条的。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 查看文件夹文件长名列表&lt;/span&gt;
ls -l

&lt;span class=&quot;c&quot;&gt;# 查看文件夹文件短名列表，请注意对比&lt;/span&gt;
ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;查看数据文件&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 用gunzip解压文件，一般来说，以*.gz, *.bz, *.tar.gz结尾的文件为压缩文件&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 用gzip可以压缩文件，如果没有安装gzip，可以sudo apt-get install gzip&lt;/span&gt;
gunzip Danio_rerio.Zv9.75.dna.toplevel.fa.gz

&lt;span class=&quot;c&quot;&gt;# 如果你觉得一个个解压太烦了，可以这样&lt;/span&gt;
ls *.gz | xargs gunzip
&lt;span class=&quot;c&quot;&gt;# 或者，这是一个while循环语句&lt;/span&gt;
ls *.gz | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;line; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;gunzip &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;;

&lt;span class=&quot;c&quot;&gt;# less查看文件&lt;/span&gt;
less Danio_rerio.Zv9.75.gtf

&lt;span class=&quot;c&quot;&gt;# 你会发现有的行太长了，要换行才能显示，显得格式很乱，加上-S参数可以不换行显示&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 用less打开后，可以通过上下左右键移动，也可以用pagedown和pageup上下翻页&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 按&amp;quot;/&amp;quot;可以进行字符串查找，就像word里的查找框一样&lt;/span&gt;
less -S Danio_rerio.Zv9.75.gtf

&lt;span class=&quot;c&quot;&gt;# 查看所有的染色体名字，grep是筛选的意思，筛选条件就是&amp;quot;^&amp;gt;&amp;quot;,以&amp;gt;开头&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 就是查看所有以&amp;gt;开头的行&lt;/span&gt;
grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;^&amp;gt;&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.dna.toplevel.fa

&lt;span class=&quot;c&quot;&gt;# 你会发现输出会有&amp;quot;&amp;gt;&amp;quot;号，如何去除呢？&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 可以用sed命令去除，sed教程：http://www.cnblogs.com/cbscan/articles/2277351.html　和　http://www.kuqin.com/docs/sed.html&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 用null来替换&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;^&amp;gt;&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.dna.toplevel.fa | sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^&amp;gt;//g&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 查看特定转录本的gtf信息&lt;/span&gt;
grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;ENSDART00000126123&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.gtf 

&lt;span class=&quot;c&quot;&gt;# 或者&lt;/span&gt;
grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;ENSDART00000126123&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.gtf | less -S

&lt;span class=&quot;c&quot;&gt;# 或者可以生成另外一个文件并保存&lt;/span&gt;
grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;ENSDART00000126123&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.gtf &amp;gt; new.gtf

&lt;span class=&quot;c&quot;&gt;# 如果有多个转录本需要收集，可以用&amp;quot;&amp;gt;&amp;gt;&amp;quot;把数据追加到文件&lt;/span&gt;
grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;ENSDART00000126752&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.gtf &amp;gt;&amp;gt; new.gtf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;简单统计分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;awk命令的使用，请参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html&quot;&gt;http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 统计文件内容行数，你会得到一个很大的数字，因为基因组挺大的&lt;/span&gt;
wc -l Danio_rerio.Zv9.75.dna.toplevel.fa

&lt;span class=&quot;c&quot;&gt;# 统计基因组序列条数，因为担心有重复的基因组序列，所以先排序sort，然后把相同的序列id去除uniq&lt;/span&gt;
grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;^&amp;gt;&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.dna.toplevel.fa | sort | uniq | wc -l

&lt;span class=&quot;c&quot;&gt;# 统计zebra fish基因组中有多少个蛋白序列&lt;/span&gt;
grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;^&amp;gt;&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.pep.all.fa | wc -l

&lt;span class=&quot;c&quot;&gt;# 统计zebra fish基因组中有多少个exon&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -v &amp;quot;^#&amp;quot; 表示除去以#开头的行&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# awk -F&amp;quot;\t&amp;quot; &amp;#39;$3 ~ /exon/&amp;#39; 表示以&amp;quot;\t&amp;quot;分割每列，并且第３列包含字符串&amp;quot;exon&amp;quot;&lt;/span&gt;
grep -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;^#&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.gtf | awk -F&lt;span class=&quot;s2&quot;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;$3 ~ /exon/&amp;#39;&lt;/span&gt; | wc -l

&lt;span class=&quot;c&quot;&gt;# 统计zebra fish基因组中有多少个rRNA基因&lt;/span&gt;
grep -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;^#&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.gtf　| awk -F&lt;span class=&quot;s2&quot;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;$2 ~ /rRNA/ &amp;amp;&amp;amp; $3 ~ /gene/&amp;#39;&lt;/span&gt; | wc -l

&lt;span class=&quot;c&quot;&gt;# 统计zebra fish基因组中每一个染色体上有多少个蛋白编码基因&lt;/span&gt;
grep -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;^#&amp;quot;&lt;/span&gt; Danio_rerio.Zv9.75.gtf | awk -F&lt;span class=&quot;s2&quot;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;$2 ~ /protein_coding/ &amp;amp;&amp;amp; $3 ~ /gene/&amp;#39;&lt;/span&gt; | cut -f 1 | sort | uniq -c &amp;gt; chr_gene_count.lst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这些只是基本的操作，可以让你尽快熟悉linux命令行环境，建议多点尝试。&lt;/p&gt;

&lt;p&gt;仅仅看教程，是无法学会技能的，但是我们确信：实践是可以让你成为高手。&lt;/p&gt;

&lt;p&gt;转载请标明出处：&lt;/p&gt;

&lt;p&gt;http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/15/simple-shell-command-for-bioinfo/&lt;/p&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/simple-shell-command-for-bioinfo</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/simple-shell-command-for-bioinfo</guid>
                <pubDate>2014-07-16T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>JBrowser:导入vcf wig和bam数据</title>
                <description>
&lt;h4 id=&quot;vcf-wigbam&quot;&gt;vcf, wig和bam文件的介绍&lt;/h4&gt;

&lt;p&gt;vcf文件主要是用来记录基因组variants位置及variants功能注释。&lt;/p&gt;

&lt;p&gt;详细格式请查看：&lt;/p&gt;

&lt;p&gt;http://samtools.github.io/hts-specs/&lt;/p&gt;

&lt;p&gt;wig是用来表示连续和非连续数据信号的文件格式。&lt;/p&gt;

&lt;p&gt;详细格式请查看：&lt;/p&gt;

&lt;p&gt;http://www.genome.ucsc.edu/goldenPath/help/wiggle.html&lt;/p&gt;

&lt;p&gt;bam是短片断序列alignment结果sam文件，通过samtools排序压缩后生成的文件，用于存储比对文件。
bam文件需要通过samtools进行查看。&lt;/p&gt;

&lt;p&gt;详细格式请查看：&lt;/p&gt;

&lt;p&gt;http://samtools.github.io/hts-specs/SAMv1.pdf&lt;/p&gt;

&lt;p&gt;http://genome.sph.umich.edu/wiki/SAM&lt;/p&gt;

&lt;p&gt;http://picard.sourceforge.net/explain-flags.html&lt;/p&gt;

&lt;p&gt;http://wiki.bits.vib.be/index.php/.sam&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;samtool view &amp;lt;bam_file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;vcf&quot;&gt;导入vcf文件&lt;/h4&gt;

&lt;p&gt;我个人觉得tracks.conf配置文件的配置内容更加易读，所以接下来的配置信息，我都写到tracks.conf文件。&lt;/p&gt;

&lt;p&gt;vcf文件有两种显示方式：CanvasVariants和HTMLVariants。我暂没有发现两者的区别。&lt;/p&gt;

&lt;p&gt;在导入vcf文件前要对vcf文件进行压缩，并建立index，这个过程要求安装samtools/tabix。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# tabix: https://github.com/samtools/tabix&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 下载并安装tabix&lt;/span&gt;
git clone https://github.com/samtools/tabix.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tabix
make

&lt;span class=&quot;c&quot;&gt;# 对vcf进行压缩,以s410.vcf为例&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$tabix&lt;/span&gt;/bgzip s410.vcf

&lt;span class=&quot;c&quot;&gt;# 建立index&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$tabix&lt;/span&gt;/tabix -p s410.vcf.gz

&lt;span class=&quot;c&quot;&gt;# 生成s410.vcf.gz.tbi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;CanvasVariants&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; tracks . s410 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;storeClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; JBrowse/Store/SeqFeature/VCFTabix
&lt;span class=&quot;nv&quot;&gt;urlTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ../../vcf/s410.vcf.gz
&lt;span class=&quot;nv&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; VCF
&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; JBrowse/View/Track/CanvasVariants
&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s410 VCF1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;HTMLVariants&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; tracks . s410-2 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
hooks.modify &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; track, feature, div &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; div.style.backgroundColor &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; track.config.variantIsHeterozygous&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;feature&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ? &lt;span class=&quot;s1&quot;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; : &lt;span class=&quot;s1&quot;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; s410 VCF2
&lt;span class=&quot;c&quot;&gt;# 区分杂合和纯合位点&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;variantIsHeterozygous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; feature &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; var &lt;span class=&quot;nv&quot;&gt;genotypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; feature.get&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;genotypes&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; var sampleName in genotypes &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; try &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; var &lt;span class=&quot;nv&quot;&gt;gtString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; genotypes&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sampleName&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;.GT.values&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; ! /^1&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\|\/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$/&lt;/span&gt;.test&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; gtString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ! /^0&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\|\/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$/&lt;/span&gt;.test&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; gtString &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; catch&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;storeClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; JBrowse/Store/SeqFeature/VCFTabix
&lt;span class=&quot;nv&quot;&gt;urlTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ../../vcf/s410.vcf.gz
&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; JBrowse/View/Track/HTMLVariants
metadata.category &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; VCF
metadata.Description &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Variants called from XX.bam using samtools and bcftools.  Heterozygous variants are shown in red, homozygous variants in blue.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;bam&quot;&gt;导入bam文件&lt;/h4&gt;

&lt;p&gt;bam文件导入后，有两种显示方式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;直接显示每一个reads的比对情况(type = JBrowse/View/Track/Alignments2)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;只显示比对的coverage情况(type = JBrowse/View/Track/SNPCoverage)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两种方式均要临时读进某个region的alignment数据，所显示的速度较为慢的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;alignment2方式&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;[ tracks . s410_bam ]                     #　以s410.bam为例，要求已经排序并建立index, **.bam.bai文件
style.height = 7
key = BAM - s410 alignment2
storeClass = JBrowse/Store/SeqFeature/BAM
urlTemplate = ../../data/s410.sorted.rmdup.bam
maxFeatureScreenDensity = 4
metadata.category = BAM
metadata.Description = small test pattern of BAM-format paired alignments of simulated resequencing reads on the s410 sample.
type = JBrowse/View/Track/Alignments2
chunkSizeLimit = 50000000                  # 这个是限制在某一个region允许读取的数据量，如果读进的数据量太大会造成浏览器“罢工”。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;coverage方式&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;[ tracks . volvox-sorted_bam_coverage ]
storeClass = JBrowse/Store/SeqFeature/BAM
urlTemplate = ../../data/s410.sorted.rmdup.bam
metadata.category = BAM
metadata.Description = SNP/Coverage view of s410.bam, simulated resequencing alignments.
type = JBrowse/View/Track/SNPCoverage       #注意这个设置的区别
key = BAM - s410 SNPs/Coverage
chunkSizeLimit = 50000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;wig&quot;&gt;导入wig文件&lt;/h4&gt;

&lt;p&gt;JBrowser并不直接支持wig文件，它要求wig文件压缩成bigwig格式，这个可以大大节约存储空间。&lt;/p&gt;

&lt;p&gt;目前还没有现成的程序支持bam文件转换为wig文件，wig文件主要是用来看sequencing的coverage和density分布情况，所以先解决bam和wig文件转换问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;from bam file to wig file&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 先用samtools把bam转化为sam数据流，再通过管道把数据导入到sam2wig.pl脚本，生成wig文件&lt;/span&gt;
samtools view ../data/s410.sorted.rmdup.bam | perl sam2wig.pl --bin 30 --minMQ 30 - &amp;gt; s410.wig

&lt;span class=&quot;c&quot;&gt;# 下载ucsc tools&lt;/span&gt;
wget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes
wget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig

&lt;span class=&quot;c&quot;&gt;# 把wig转化为bigwig格式&lt;/span&gt;
./fetchChromSizes hg19 &amp;gt; hg19.chrom.sizes
./wigToBigWig ./s410.wig hg19.chrom.sizes s410.bw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;sam2wig.pl代码如下：&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/zhoujj2013/2f44ba0c0437f0241cc4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;配置bigwig文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;bigwig有两种显示的方式，一种是density，另外一种是XY-plot。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;density plot方式&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;[ tracks . s410_bw_density ]
style.neg_color = function(feature) { return feature.get(&amp;#39;score&amp;#39;) &lt;span class=&quot;nt&quot;&gt;&amp;lt; 150&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;如果位点的&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sequencing&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 150X显示为红色，否则绿色
bicolor_pivot = mean
key = s410 BigWig Density
storeClass = JBrowse/Store/BigWig
urlTemplate = ../../sam2wig/s410
type = JBrowse/View/Track/Wiggle/Density
metadata.category = Quantitative / Density # 这里是表示两层的分类目录，用/分开。
metadata.Description = Wiggle/Density view of s410.bw.  Also demonstrates use of a user-configurable callback to set the value of neg_color to green when the score is below 150.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;XY-plot方式&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;[ tracks . s410_bw_xyplot ]
style.pos_color = function(feature) { return feature.get(&amp;#39;score&amp;#39;) &amp;gt; 30 ? &amp;#39;red&amp;#39; : &amp;#39;blue&amp;#39;; }
variance_band = true
key = s410 BigWig XY
storeClass = JBrowse/Store/BigWig
urlTemplate = ../../sam2wig/s410.bw
type = JBrowse/View/Track/Wiggle/XYPlot
metadata.category = Quantitative / XY Plot
metadata.description = Wiggle/XYPlot view of volvox_microarray.bw.  Demonstrates use of a user-configured callback to set the bar color to red when the score is above 30.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;完成vcf、wig、bam文件导入后，不需要建立索引，直接就可以查看信号。&lt;/p&gt;

&lt;p&gt;参考：
http://gmod.org/wiki/JBrowse_Configuration_Guide&lt;/p&gt;

&lt;p&gt;转载请标明出处：
http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/jbrowser-import-vcf-wig-bam/&lt;/p&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/jbrowser-import-vcf-wig-bam</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/jbrowser-import-vcf-wig-bam</guid>
                <pubDate>2014-07-16T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>JBrowser:导入UCSC数据库基因信息数据</title>
                <description>
&lt;p&gt;UCSC基因组数据库中有很多有用的基因组数据，再加上这两年新加入的encode project数据，组合这些数据可以对模式物种进行深入研究。但是它不包含的刚测序的物种信息，一般来说，hg19、hg18、mouse、zera fish、fly、c.elegan和yeast的数据较为全面。&lt;/p&gt;

&lt;p&gt;JBrowser提供perl脚本可以方便地把ucsc数据导入浏览器。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;下载必要的数据库文件&lt;/h4&gt;

&lt;p&gt;ucsc是一个大型的数据库，可以先解的其ftp目录结构：&lt;/p&gt;

&lt;p&gt;hg19 ftp数据库的目录结构
http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 建立文件夹&lt;/span&gt;
mkdir ucsc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ucsc

&lt;span class=&quot;c&quot;&gt;# 下载该物种数据库sql文件&lt;/span&gt;
wget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/trackDb.sql
wget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/trackDb.txt.gz

&lt;span class=&quot;c&quot;&gt;# 下载refgene基因集文件，这个是ucsc特有的格式&lt;/span&gt;
wget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/refGene.sql
wget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/refGene.txt.gz

&lt;span class=&quot;c&quot;&gt;# 每一个数据集包含两个文件&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;refgenejbrowser&quot;&gt;把refGene导入JBrowser&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# --in 这里是指输入文件夹&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --track 这个的名字要与所下载文件的tracks一致&lt;/span&gt;
perl &lt;span class=&quot;nv&quot;&gt;$JB&lt;/span&gt;/bin/ucsc-to-json.pl --in ./ucsc/ --track &lt;span class=&quot;s1&quot;&gt;&amp;#39;refGene&amp;#39;&lt;/span&gt; -out ./json/hg19/ --cssclass transcript --subfeatureClasses &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;quot;CDS&amp;quot;:&amp;quot;transcript-CDS&amp;quot;, &amp;quot;UTR&amp;quot;: &amp;quot;transcript-UTR&amp;quot;}&amp;#39;&lt;/span&gt; --arrowheadClass transcript-arrowhead
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section-1&quot;&gt;建立索引（可以选择不建立索引）&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;perl /var/www/jbrowser/bin/generate-names.pl --dir ./json/hg19/ -tracks refGene -v --sortMem 2048000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其它的ucsc数据库里的tracks导入方法类似。&lt;/p&gt;

&lt;p&gt;参考：
http://gmod.org/wiki/JBrowse_Configuration_Guide&lt;/p&gt;

&lt;p&gt;转载请注明出处：
http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/jbrowser-import-ucsc-tracks/&lt;/p&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/jbrowser-import-ucsc-tracks</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/jbrowser-import-ucsc-tracks</guid>
                <pubDate>2014-07-16T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Learn:生物数据库集合</title>
                <description>
&lt;p&gt;生物信息数据量大，种类繁多，所以形成各种各样的生物数据库。&lt;/p&gt;

&lt;p&gt;生物数据库之多，我们不可能把所有的数据库都掌握，只能合理利用某一些数据库。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;主要生物信息数据库&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;NCBI (&lt;a href=&quot;http://www.ncbi.nlm.nih.gov/&quot;&gt;http://www.ncbi.nlm.nih.gov/&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EBI (&lt;a href=&quot;http://www.ebi.ac.uk/&quot;&gt;http://www.ebi.ac.uk/&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DDJB (&lt;a href=&quot;http://www.ddbj.nig.ac.jp/&quot;&gt;http://www.ddbj.nig.ac.jp/&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ENSEMBL (&lt;a href=&quot;http://www.ensembl.org/index.html&quot;&gt;http://www.ensembl.org/index.html&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UCSC (&lt;a href=&quot;http://genome.ucsc.edu/&quot;&gt;http://genome.ucsc.edu/&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然还有很多数据库，在这就不列举了。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;寻找生物信息数据库&lt;/h4&gt;

&lt;p&gt;Oxford Journals &lt;a href=&quot;http://nar.oxfordjournals.org/&quot;&gt;Nucleic Acids Research&lt;/a&gt; 每年度会收集现有的生物信息数据库，并整理到&lt;a href=&quot;http://www.oxfordjournals.org/our_journals/nar/database/c/&quot;&gt;Database Summary Paper Categories&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;用户可以根据自己的研究需要寻找自己想要的数据库，如果你发现你想要的数据库不在里面，那恭喜你，你可以把你想要的数据库做出来，然后发表文章了。&lt;/p&gt;

&lt;p&gt;当然，你也可以用万能的google查寻你自己想要的数据库。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;如何认识一个生物数据库&lt;/h4&gt;

&lt;p&gt;数据库有很多，但是那个数据库才是你能用上的，或者适合你用的。在这之前，你要细心从几个方面去了解目标数据库：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;数据库存储什么类型的生物信息；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所存储的数据是否可信；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所存储的数据是否符合你的研究背景；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果这些都满足了，我想80%是你想要的数据库。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;怎么使用生物信息数据库&lt;/h4&gt;

&lt;p&gt;这方面无法写。&lt;/p&gt;

&lt;p&gt;PS: 了解一个数据库不是一件容易的事情，因为很多数据包含的信息量很大，数据内容很乱，API接口很多。&lt;/p&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/database-collection</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/16/database-collection</guid>
                <pubDate>2014-07-16T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>JBrowser:导入bed和gff3文件</title>
                <description>
&lt;p&gt;Bed和gff3文件是存储基因功能元件位置信息的文件。想把数据导入JBrowser，首先要理解文件格式及其存储内容。&lt;/p&gt;

&lt;p&gt;Bed的每一个位置坐标代表一个位置，详细格式见：http://genome.ucsc.edu/FAQ/FAQformat.html#format1&lt;/p&gt;

&lt;p&gt;gff3可以表现一个基因或者转录本的结构及位置信息，详细格式见：http://genome.ucsc.edu/FAQ/FAQformat.html#format3&lt;/p&gt;

&lt;p&gt;想了解更多与gff3格式相关的信息，请参考：&lt;/p&gt;

&lt;p&gt;http://www.sequenceontology.org/gff3.shtml&lt;/p&gt;

&lt;p&gt;http://gmod.org/wiki/GFF3#GFF3_Annotation_Section&lt;/p&gt;

&lt;p&gt;在线的gff3格式认证识别：&lt;/p&gt;

&lt;p&gt;http://modencode.oicr.on.ca/cgi-bin/validate_gff3_online&lt;/p&gt;

&lt;p&gt;gff3格式当时发布的时候是想用这种格式表示基因组的所有信息，也就是说，bed文件也可以转化为gff3格式导入。&lt;/p&gt;

&lt;h4 id=&quot;jbrowserbed&quot;&gt;直接向JBrowser中导入bed文件&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;利用$JB/bin/flatfile-to-json.pl导入bed文件；&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# --className 是把基因组元件显示的css样品，详细请查看：$JB/docs/featureglyphs.html&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --arrowheadClass 表示是否在元件两边加上方向，此处不需要加箭头方向&lt;/span&gt;
perl &lt;span class=&quot;nv&quot;&gt;$JB&lt;/span&gt;/bin/flatfile-to-json.pl --bed TargetGeneRegionExtend2bp.bed --key &lt;span class=&quot;s1&quot;&gt;&amp;#39;XXTargetReg&amp;#39;&lt;/span&gt; --className feature2 --trackLabel RandomTarget --arrowheadClass none --metadata &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;quot;category&amp;quot; : &amp;quot;TargetReSequencing&amp;quot;}&amp;#39;&lt;/span&gt; --out ./json/hg19/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;利用$JB/bin/flatfile-to-json.pl对bed文件的gene元件建立名字索引；&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# --sortMem 是指定建立名字索引时所用的内存，单位是b&lt;/span&gt;
perl &lt;span class=&quot;nv&quot;&gt;$JB&lt;/span&gt;/bin/generate-names.pl --dir ./json/hg19/ -tracks RandomTarget -v --sortMem 2048000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以从tracksselector里面选择我们刚才建立的track。&lt;/p&gt;

&lt;p&gt;完成名字索引建立后，我们可以在查询框查询相应名字，ajax是会有自动提示的。&lt;/p&gt;

&lt;h4 id=&quot;jbrowergff3gtfgff2&quot;&gt;向JBrower导入gff3/gtf/gff2文件&lt;/h4&gt;

&lt;p&gt;JBrowser的html feature暂时只支持gff3格式文件，gtf和gff2文件都要根据http://gmod.org/wiki/GFF3#GFF3_Annotation_Section中的说明进行格式转换，由于gff3有一些field名字是可以自定义的，所以还得根据JBrowser进行调整。&lt;/p&gt;

&lt;p&gt;JBrowser还有另外一种CanvasFeatures，它是支持gtf和gff3格式的，但是它是临时读取文件的，显示速度有点过慢。&lt;/p&gt;

&lt;p&gt;关于HTMLfeatures和CanvasFeatures，我日后详细写个文章来研究。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTMLfeatures导入&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把Ensembl gtf文件转换为gff3格式；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先准备chromosome名字的转换文件chr.lst&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;MT	chrM
X	chrX
Y	chrY
1	chr1
2	chr2
3	chr3
4	chr4
5	chr5
6	chr6
7	chr7
8	chr8
9	chr9
10	chr10
11	chr11
12	chr12
13	chr13
14	chr14
15	chr15
16	chr16
17	chr17
18	chr18
19	chr19
20	chr20
21	chr21
22	chr22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;转换gtf文件格式为gff3:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;perl ./gtf2gff3.pl Homo_sapiens.GRCh37.75.gtf chr.lst &amp;gt; Homo_sapiens.GRCh37.75.gff3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;gtf2gff3.pl代码如下：&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/zhoujj2013/024ef0789c1f5538d568.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;分染色体导入gff3文件（如果单个gff3文件太大会导致程序运行的内存峰值达到5G）;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;单个文件导入：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# --trackLabel 是指文件存储时，track的id&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --className 显示的基因的样式&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --subfeatureClasses 基因结构里的元件样式，如CDS,exon,UTR等&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --key 是显示在jbrowser中的tracks名字，与trackLabel可以是相同的，但是名字的用途是有区别的&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --autocomplete 是让基因的名字可以查询&lt;/span&gt;
perl &lt;span class=&quot;nv&quot;&gt;$JB&lt;/span&gt;/bin/flatfile-to-json.pl --out ./json/hg19/ --gff Homo_sapiens.GRCh37.75.gff3  --type mRNA   --autocomplete all --trackLabel EnsemblTrans --key &lt;span class=&quot;s1&quot;&gt;&amp;#39;EnsemblTrans&amp;#39;&lt;/span&gt; --getSubfeatures --className transcript  --subfeatureClasses &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;quot;CDS&amp;quot;: &amp;quot;transcript-CDS&amp;quot;}&amp;#39;&lt;/span&gt;  --arrowheadClass arrowhead  --urltemplate &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://asia.ensembl.org/Homo_sapiens/Transcript/Summary?t={id}&amp;amp;db=core&amp;quot;&lt;/span&gt; --maxLookback 2000 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;分染色体导入：&lt;/p&gt;

&lt;p&gt;写了个perl脚本，把染色体分开导入gff3文件，代码如下：&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/zhoujj2013/5e2c1f861fbe904e7de5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;运行以下命令导入：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;perl ./import_gff3_by_chr.pl Homo_sapiens.GRCh37.75.gff3 ./json/hg19/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;为新的tracks建立索引&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;perl /var/www/jbrowser/bin/generate-names.pl --dir ./json/hg19/ -tracks EnsemblTrans -v --sortMem 2048000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;CanvasFeatures导入&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CanvasFeatures导入会相对容易一些，唯一要做的工作是格式转换，要把你手上的gff／gtf文件变为JBrowser所要求的。CanvasFeatures是支持gff3和gtf文件直接导入的，但是文件格式有一些要求。&lt;/p&gt;

&lt;p&gt;把你的文件转换成http://gmod.org/wiki/GFF3#GFF3_Annotation_Section所要求的格式就不会错的。在此我就不写转换脚本程序了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;导入gff3文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在./json/hg19/tracks.conf文件中加入以下配置：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;[ tracks . hg19EnsemblTrans ]                         # 注意这里的格式
storeClass = JBrowse/Store/SeqFeature/GFF3
urlTemplate = ../../Homo_sapiens.GRCh37.75.gff3  # 相对于./json/hg19/的文件路径，注意文件格式
type = CanvasFeatures
metadata.description = This is just all the features in the Homo_sapiens.GRCh37.75.gff3 file, displayed directly from a web-accessible GFF3 file
category = Gene                                  # 这个tracks的类别
key = GFF3 - Homo_sapiens.GRCh37.75.gff3　　　　 # jbrowser要显示的名字
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;导入gtf文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在./json/hg19/tracks.conf文件中加入以下配置：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;[ tracks . hg19EnsemblTrans ]
storeClass = JBrowse/Store/SeqFeature/GTF
urlTemplate = ../../Homo_sapiens.GRCh37.75.gtf    # 注意ensembl中的chromosome id一定要与reference genome是一致的
type = CanvasFeatures
metadata.description = This is just all the features in the Homo_sapiens.GRCh37.75.gtf file, which like the Homo_sapiens.GRCh37.75.gff3 file, is displayed directly from a web-accessible GTF file
category = Gene
key = GTF - Homo_sapiens.GRCh37.75.gtf in-memory adaptor
style.label = transcript_id,gene_id  # 指定你所要显示转录本及基因类型
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果你用CanvasFeatures来显示tracks的话，这些tracks的名字是无法建立索引的。&lt;/p&gt;

&lt;p&gt;此处我们可以总结出：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;生物信息分析经常要对格式进行转换，对生物信息常用数据格式一定熟悉；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;掌握一门编程语言，可以完成基本程序书写非常重要；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;要学习看生物信息软件的使用说明，并通过google查询解决方案。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考：
http://gmod.org/wiki/JBrowse_Configuration_Guide&lt;/p&gt;

&lt;p&gt;声明：&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/15/jbrowser-import-bed-and-gff3/&lt;/p&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/15/jbrowser-import-bed-and-gff3</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/15/jbrowser-import-bed-and-gff3</guid>
                <pubDate>2014-07-15T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>JBrowser:安装及配置</title>
                <description>
&lt;p&gt;这周有点空余时间，所以尝试着去把JBrowser配置好。从事生物信息分析已经４年了，在人们看来生物信息是个“高大上”的行当（虽然我不认为是这样），无论你的算法多么的ＮＢ，都无法离开肉眼的观察与判断。因为生物信息不是０／１的简单组合，也不是ＡＴＣＧ的简单排列，而是一首ＡＴＣＧ简单字符组成的长曲。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;希望JBrowser就像一个播放机一样，让你听到生命的赞歌，也希望您对生命的感悟超越前人。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;选择&lt;a href=&quot;http://jbrowse.org/&quot;&gt;JBrowser&lt;/a&gt;的原因：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;相对UCSC Genome Browser的配置，JBrowser配置更加简单，对硬件需求低，对数据库没有要求；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JBrowser是基于Javascript和HTML5构建的，对浏览器兼容性好；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UCSC Genome Browser只对一些重要的物种提供数据，而对新测序物种没有相应支持，JBrowser提倡自主定制数据；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JBrowser是&lt;a href=&quot;http://gmod.org/wiki/Main_Page&quot;&gt;GMOD&lt;/a&gt;的成员,其中GalaxybioMark等都是很成功的生物信息软件。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;JBrowser也有其致命的弱点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于Javascript和HTML5构建，信赖于浏览器处理和存储数据，很容易引起浏览器崩溃；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所支持数据格式和格式转换支持不如UCSC；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;下面简述配置步骤：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;下载及安装JBrowser，请参考（http://jbrowse.org/code/JBrowse-1.11.4/docs/tutorial/）；&lt;/li&gt;
&lt;/ul&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# make a directory that this user can write to	&lt;/span&gt;
sudo mkdir /var/www/jbrowse 
sudo chown &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;whoami&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; /var/www/jbrowse

&lt;span class=&quot;c&quot;&gt;# cd into it&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/www/jbrowse;

&lt;span class=&quot;c&quot;&gt;# fetch a JBrowse release zip file&lt;/span&gt;
curl -O http://jbrowse.org/releases/JBrowse-x.x.x.zip

&lt;span class=&quot;c&quot;&gt;# unzip it and cd into it&lt;/span&gt;
unzip JBrowse-x.x.x.zip
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;JBrowse-x.x.x

&lt;span class=&quot;c&quot;&gt;#一定要确保你用的是bash shell&lt;/span&gt;
./setup.sh 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;安装成功后，你可以通过浏览器查看默认配置的基因组。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;http://your.jbrowse.root/index.html?data=sample_data/json/volvox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;JBrowser是如何工作的；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JBrowser读取json文件夹下的数据，然后根据track的信息来显示数据的。&lt;/p&gt;

&lt;p&gt;json文件夹如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;path_to_json/json
	---hg19
	------trackList.conf  # 用来配置tracks
	------tracks.conf     # 用来配置tracks
	------names # 所有的名字
	------seq  # 参考基因组存放的地方
	------tracks # 所有要格式后的tracks数据存放的地方
	---hg18
	...
	---c.elegan
	...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;hg19/hg18/c.elegan分别代表三个不同的基因组。&lt;/p&gt;

&lt;p&gt;JBrowser先从主页面配置文件中读取主页的信息，再通过javascript调用，根据trackList.conf和tracks.conf中的配置信息读取tracks的数据，然后再返回到页面，这个过程没有通过数据库，所以如果读取大文件的话会花费一些时间。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JBrowser主页面配置；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面列出一些主页面的主要配置文件：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;index.html        # 这个是主页html文件，里面都是javascript的调用
*.css             # 是对genome browser元件的样式进行设置的
jbrowse.conf      # 这两个是主页设置文件，一个是txt format，另外一个文件是json format，设置效果是一样的
jbrowse_conf.json # 这两个是主页设置文件，一个是txt format，另外一个文件是json format，设置效果是一样的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对about页面的设置：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;[aboutThisBrowser]
title = &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&amp;gt;&lt;/span&gt;Oryza sativa&lt;span class=&quot;nt&quot;&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;        # 可以用markdown来设置
description = Browser for O. sativa transcripts and RNA-seq data, produced by the Smith laboratory at Example State University.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对于tracks面板的设置：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;[trackSelector] # 用#注释，表示不设置
type = Faceted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对于数据集的设置（对hg19数据进行开放）：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;[datasets.hg19]                    # datasets.&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;数据集的id&amp;gt;
url = ?data=/zhoujj_jb/json/hg19   #?data=&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;相对于jbrowser根目录的相对路径，json目录下&amp;gt;/hg19
name = hg19                        # 数据集的id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这些是主页面的基本设置，但是更重要的是，如何把自己的数据上传到JBrowser？这一部分的内存太多了。我先列一下，日后再补充。&lt;/p&gt;

&lt;p&gt;这一部分主要包括:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;导入参考序列(reference genome)；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;导入UCSC tracks&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;导入gff2/gtf/gff3&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;导入bed文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;导入bam/bigwig文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其它文件格式转化为jbrowser支持的格式&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/13/jbrowser-installation</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/13/jbrowser-installation</guid>
                <pubDate>2014-07-13T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>JBrowser:导入参考基因组序列</title>
                <description>
&lt;p&gt;向JBrowser导入数据，首先要弄清楚输入文件的格式，再根据要求导入JBrowser。&lt;/p&gt;

&lt;p&gt;从事生物信息工作，８０％的程序都是利用一些已有的生物信息分析工具完成的，所以搞清楚程序输入和输出特别重要。&lt;/p&gt;

&lt;p&gt;常用生物信息数据格式，请参考（大部分生物研究材料都是英文的，如看不懂，也要慢慢看）：&lt;/p&gt;

&lt;p&gt;http://genome.ucsc.edu/FAQ/FAQformat.html&lt;/p&gt;

&lt;p&gt;向JBrowser导入参考序列，有三种方法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;利用./bin/prepare-refseqs.pl导入fasta文件；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;利用./bin/prepare-refseqs.pl导入gff3文件；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;利用./bin/prepare-refseqs.pl，根据biodb-to-json.pl配置文件，从CHADO数据库中导入数据；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我推荐使用方法１，因为包含参考基因组和基因位置信息的gff3文件太大，导入时需要的很大的内存；另外数据要导入CHADO数据库也是一件挺复杂的事情，熟悉CHADO数据库的朋友可以使用方法３。&lt;/p&gt;

&lt;p&gt;我详细描述一下方法１：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;利用./bin/prepare-refseqs.pl导入fasta文件；&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# $JB = path_to_jbrowser # 这里$JB=/var/www/jbrowser&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 建立文件夹存在个人的JBrowser文件&lt;/span&gt;
mkdir zhoujj_jb

&lt;span class=&quot;c&quot;&gt;# 在JBrowser安装文件夹建立软连接&lt;/span&gt;
ln -s /home/zhoujj/zhoujj_jb /var/www/jbrowser

&lt;span class=&quot;c&quot;&gt;# 建立文件夹存放以hg19为参考基因组的tracks&lt;/span&gt;
mkdir -p ./json/hg19

&lt;span class=&quot;c&quot;&gt;# --fasta 输入文件&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --out json文件输出文件夹&lt;/span&gt;
perl &lt;span class=&quot;nv&quot;&gt;$JB&lt;/span&gt;/bin/prepare-refseqs.pl --fasta ./hg19.fa --out ./json/hg19
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;利用./bin/add-json.pl添加dataset_id，这个id会显示在参考基因组选择菜单;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;perl &lt;span class=&quot;nv&quot;&gt;$JB&lt;/span&gt;/bin/add-json.pl &lt;span class=&quot;s1&quot;&gt;&amp;#39;{ &amp;quot;dataset_id&amp;quot;: &amp;quot;hg19&amp;quot; }&amp;#39;&lt;/span&gt; ./json/hg19/trackList.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;为基因组序列建立索引；&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;perl &lt;span class=&quot;nv&quot;&gt;$JB&lt;/span&gt;/bin/generate-names.pl --dir ./json/hg19/ -v --sortMem 2048000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;修改JBrowser配置文件；&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo vim &lt;span class=&quot;nv&quot;&gt;$JB&lt;/span&gt;/jbrowse.conf
&lt;span class=&quot;c&quot;&gt;# 添加以下命令&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;datasets.hg19&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ?data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zhoujj_jb/json/hg19
&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; hg19
&lt;span class=&quot;c&quot;&gt;# 保存并退出&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在可以打开浏览器测试：
http://host/jbrowser/index.html?data=zhoujj_jb/json/hg19&lt;/p&gt;

&lt;p&gt;在JBrower中，导入参考序列fasta文件、bed文件、gff3文件后，要建立基因名或者序列名字的索引，才能在浏览器中正常查看。&lt;/p&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/13/jbrowser-import-reference-genome</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/bioinformatics/2014/07/13/jbrowser-import-reference-genome</guid>
                <pubDate>2014-07-13T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>vim设置python关键字自动补全</title>
                <description>
&lt;p&gt;因为自己比较喜欢在linux工作，但是又不想放弃eclipse中python强大的python自动补全功能，所以在百度上查了一下如何设置。但是这些专家们写得很难懂，让我这种非科班出身的分析员来说，实在无法理解。在此，我解释一下如何配置。&lt;/p&gt;

&lt;p&gt;首先，我们要实现的目标：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;简单python关键词补全；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 函数补全带括号；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 模块补全；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 模块内函数，变量补全；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;from module import sub-module 补全；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面简述配置步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;下载最新的pydiction（http://www.vim.org/scripts/script.php?script_id=850）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;mkdir ~/.vim/after/ftplugin/&lt;/p&gt;

  &lt;p&gt;cd ~/.vim/after/ftplugin/&lt;/p&gt;

  &lt;p&gt;git clone https://github.com/rkulla/pydiction.git&lt;/p&gt;

  &lt;p&gt;cp pydiction/after/ftplugin/python_pydiction.vim .&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;vim自动会从~/.vim/after/ftplugin/读取配置文件，进行自动补全配置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;配置~/.vimrc文件，开启自动补全&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;vim ~/.vimrc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加如下两句：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;filetype plugin on &lt;/p&gt;

  &lt;p&gt;let g:pydiction_location = &amp;#8216;/path/to/complete-dict&amp;#8217;  #　告诉vim从这个文件查找python的关键字哈希表&lt;/p&gt;

  &lt;p&gt;let g:pydiction_menu_height = 3 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;已经成功实现功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;增加新模块关键字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;某一些模块的关键字没有包含到默认的complete_dict中，当有新的模块时，要手动把新的模块关键字加到complete-dict文件。&lt;/p&gt;

&lt;p&gt;pydiction文件夹下有一个程序pydiction.py可以实现模块字添加，以添加scipy包为例：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;cd ~/.vim/after/ftplugin/pydiction/&lt;/p&gt;

  &lt;p&gt;python ./pydiction.py scipy # 会自动保存旧的complete-dict&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;PS: vim最好的编辑器了，它没有脱离根本。它能使用户自己知道自己在做什么事情，而MS office不能。&lt;/p&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/python/2014/05/03/python_auto_complete_vim</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/python/2014/05/03/python_auto_complete_vim</guid>
                <pubDate>2014-05-03T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>UnCoverIt: a ghost born</title>
                <description>
&lt;p&gt;Hi all, I am here.&lt;/p&gt;

&lt;p&gt;In this web site, I will guide to you to understand the real idea behind the huge massive data set, such as DNA/RNA sequencing data, stock marketing data, complex social network and other kinds of data from our daily life.&lt;/p&gt;

&lt;p&gt;Hope everything is better to common people.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s go!&lt;/p&gt;

</description>
                <link>http://zhoujj2013.github.io/UnCoverIt/life/2013/10/24/uncoverit-a-ghost-born</link>
                <guid>http://zhoujj2013.github.io/UnCoverIt/life/2013/10/24/uncoverit-a-ghost-born</guid>
                <pubDate>2013-10-24T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
